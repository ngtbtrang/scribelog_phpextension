/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FacebookService_H
#define FacebookService_H

#include <thrift/TDispatchProcessor.h>
#include "fb303_types.h"

namespace facebook { namespace fb303 {

class FacebookServiceIf {
 public:
  virtual ~FacebookServiceIf() {}

  /**
   * Returns a descriptive name of the service
   */
  virtual void getName(std::string& _return) = 0;

  /**
   * Returns the version of the service
   */
  virtual void getVersion(std::string& _return) = 0;

  /**
   * Gets the status of this service
   */
  virtual fb_status::type getStatus() = 0;

  /**
   * User friendly description of status, such as why the service is in
   * the dead or warning state, or what is being started or stopped.
   */
  virtual void getStatusDetails(std::string& _return) = 0;

  /**
   * Gets the counters for this service
   */
  virtual void getCounters(std::map<std::string, int64_t> & _return) = 0;

  /**
   * Gets the value of a single counter
   * 
   * @param key
   */
  virtual int64_t getCounter(const std::string& key) = 0;

  /**
   * Sets an option
   * 
   * @param key
   * @param value
   */
  virtual void setOption(const std::string& key, const std::string& value) = 0;

  /**
   * Gets an option
   * 
   * @param key
   */
  virtual void getOption(std::string& _return, const std::string& key) = 0;

  /**
   * Gets all options
   */
  virtual void getOptions(std::map<std::string, std::string> & _return) = 0;

  /**
   * Returns a CPU profile over the given time interval (client and server
   * must agree on the profile format).
   * 
   * @param profileDurationInSec
   */
  virtual void getCpuProfile(std::string& _return, const int32_t profileDurationInSec) = 0;

  /**
   * Returns the unix time that the server has been running since
   */
  virtual int64_t aliveSince() = 0;

  /**
   * Tell the server to reload its configuration, reopen log files, etc
   */
  virtual void reinitialize() = 0;

  /**
   * Suggest a shutdown to the server
   */
  virtual void shutdown() = 0;
};

class FacebookServiceIfFactory {
 public:
  typedef FacebookServiceIf Handler;

  virtual ~FacebookServiceIfFactory() {}

  virtual FacebookServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(FacebookServiceIf* /* handler */) = 0;
};

class FacebookServiceIfSingletonFactory : virtual public FacebookServiceIfFactory {
 public:
  FacebookServiceIfSingletonFactory(const boost::shared_ptr<FacebookServiceIf>& iface) : iface_(iface) {}
  virtual ~FacebookServiceIfSingletonFactory() {}

  virtual FacebookServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(FacebookServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<FacebookServiceIf> iface_;
};

class FacebookServiceNull : virtual public FacebookServiceIf {
 public:
  virtual ~FacebookServiceNull() {}
  void getName(std::string& /* _return */) {
    return;
  }
  void getVersion(std::string& /* _return */) {
    return;
  }
  fb_status::type getStatus() {
    fb_status::type _return = (fb_status::type)0;
    return _return;
  }
  void getStatusDetails(std::string& /* _return */) {
    return;
  }
  void getCounters(std::map<std::string, int64_t> & /* _return */) {
    return;
  }
  int64_t getCounter(const std::string& /* key */) {
    int64_t _return = 0;
    return _return;
  }
  void setOption(const std::string& /* key */, const std::string& /* value */) {
    return;
  }
  void getOption(std::string& /* _return */, const std::string& /* key */) {
    return;
  }
  void getOptions(std::map<std::string, std::string> & /* _return */) {
    return;
  }
  void getCpuProfile(std::string& /* _return */, const int32_t /* profileDurationInSec */) {
    return;
  }
  int64_t aliveSince() {
    int64_t _return = 0;
    return _return;
  }
  void reinitialize() {
    return;
  }
  void shutdown() {
    return;
  }
};


class FacebookService_getName_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  FacebookService_getName_args(const FacebookService_getName_args&);
  FacebookService_getName_args& operator=(const FacebookService_getName_args&);
  FacebookService_getName_args() {
  }

  virtual ~FacebookService_getName_args() throw();

  bool operator == (const FacebookService_getName_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FacebookService_getName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getName_args& obj);
};


class FacebookService_getName_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~FacebookService_getName_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getName_pargs& obj);
};

typedef struct _FacebookService_getName_result__isset {
  _FacebookService_getName_result__isset() : success(false) {}
  bool success :1;
} _FacebookService_getName_result__isset;

class FacebookService_getName_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  FacebookService_getName_result(const FacebookService_getName_result&);
  FacebookService_getName_result& operator=(const FacebookService_getName_result&);
  FacebookService_getName_result() : success() {
  }

  virtual ~FacebookService_getName_result() throw();
  std::string success;

  _FacebookService_getName_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const FacebookService_getName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FacebookService_getName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getName_result& obj);
};

typedef struct _FacebookService_getName_presult__isset {
  _FacebookService_getName_presult__isset() : success(false) {}
  bool success :1;
} _FacebookService_getName_presult__isset;

class FacebookService_getName_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~FacebookService_getName_presult() throw();
  std::string* success;

  _FacebookService_getName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getName_presult& obj);
};


class FacebookService_getVersion_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  FacebookService_getVersion_args(const FacebookService_getVersion_args&);
  FacebookService_getVersion_args& operator=(const FacebookService_getVersion_args&);
  FacebookService_getVersion_args() {
  }

  virtual ~FacebookService_getVersion_args() throw();

  bool operator == (const FacebookService_getVersion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FacebookService_getVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getVersion_args& obj);
};


class FacebookService_getVersion_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~FacebookService_getVersion_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getVersion_pargs& obj);
};

typedef struct _FacebookService_getVersion_result__isset {
  _FacebookService_getVersion_result__isset() : success(false) {}
  bool success :1;
} _FacebookService_getVersion_result__isset;

class FacebookService_getVersion_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  FacebookService_getVersion_result(const FacebookService_getVersion_result&);
  FacebookService_getVersion_result& operator=(const FacebookService_getVersion_result&);
  FacebookService_getVersion_result() : success() {
  }

  virtual ~FacebookService_getVersion_result() throw();
  std::string success;

  _FacebookService_getVersion_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const FacebookService_getVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FacebookService_getVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getVersion_result& obj);
};

typedef struct _FacebookService_getVersion_presult__isset {
  _FacebookService_getVersion_presult__isset() : success(false) {}
  bool success :1;
} _FacebookService_getVersion_presult__isset;

class FacebookService_getVersion_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~FacebookService_getVersion_presult() throw();
  std::string* success;

  _FacebookService_getVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getVersion_presult& obj);
};


class FacebookService_getStatus_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  FacebookService_getStatus_args(const FacebookService_getStatus_args&);
  FacebookService_getStatus_args& operator=(const FacebookService_getStatus_args&);
  FacebookService_getStatus_args() {
  }

  virtual ~FacebookService_getStatus_args() throw();

  bool operator == (const FacebookService_getStatus_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FacebookService_getStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getStatus_args& obj);
};


class FacebookService_getStatus_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~FacebookService_getStatus_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getStatus_pargs& obj);
};

typedef struct _FacebookService_getStatus_result__isset {
  _FacebookService_getStatus_result__isset() : success(false) {}
  bool success :1;
} _FacebookService_getStatus_result__isset;

class FacebookService_getStatus_result {
 public:

  static const char* ascii_fingerprint; // = "F1BC2174724B9D2E335CD95F6D6F9367";
  static const uint8_t binary_fingerprint[16]; // = {0xF1,0xBC,0x21,0x74,0x72,0x4B,0x9D,0x2E,0x33,0x5C,0xD9,0x5F,0x6D,0x6F,0x93,0x67};

  FacebookService_getStatus_result(const FacebookService_getStatus_result&);
  FacebookService_getStatus_result& operator=(const FacebookService_getStatus_result&);
  FacebookService_getStatus_result() : success((fb_status::type)0) {
  }

  virtual ~FacebookService_getStatus_result() throw();
  fb_status::type success;

  _FacebookService_getStatus_result__isset __isset;

  void __set_success(const fb_status::type val);

  bool operator == (const FacebookService_getStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FacebookService_getStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getStatus_result& obj);
};

typedef struct _FacebookService_getStatus_presult__isset {
  _FacebookService_getStatus_presult__isset() : success(false) {}
  bool success :1;
} _FacebookService_getStatus_presult__isset;

class FacebookService_getStatus_presult {
 public:

  static const char* ascii_fingerprint; // = "F1BC2174724B9D2E335CD95F6D6F9367";
  static const uint8_t binary_fingerprint[16]; // = {0xF1,0xBC,0x21,0x74,0x72,0x4B,0x9D,0x2E,0x33,0x5C,0xD9,0x5F,0x6D,0x6F,0x93,0x67};


  virtual ~FacebookService_getStatus_presult() throw();
  fb_status::type* success;

  _FacebookService_getStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getStatus_presult& obj);
};


class FacebookService_getStatusDetails_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  FacebookService_getStatusDetails_args(const FacebookService_getStatusDetails_args&);
  FacebookService_getStatusDetails_args& operator=(const FacebookService_getStatusDetails_args&);
  FacebookService_getStatusDetails_args() {
  }

  virtual ~FacebookService_getStatusDetails_args() throw();

  bool operator == (const FacebookService_getStatusDetails_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FacebookService_getStatusDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getStatusDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getStatusDetails_args& obj);
};


class FacebookService_getStatusDetails_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~FacebookService_getStatusDetails_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getStatusDetails_pargs& obj);
};

typedef struct _FacebookService_getStatusDetails_result__isset {
  _FacebookService_getStatusDetails_result__isset() : success(false) {}
  bool success :1;
} _FacebookService_getStatusDetails_result__isset;

class FacebookService_getStatusDetails_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  FacebookService_getStatusDetails_result(const FacebookService_getStatusDetails_result&);
  FacebookService_getStatusDetails_result& operator=(const FacebookService_getStatusDetails_result&);
  FacebookService_getStatusDetails_result() : success() {
  }

  virtual ~FacebookService_getStatusDetails_result() throw();
  std::string success;

  _FacebookService_getStatusDetails_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const FacebookService_getStatusDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FacebookService_getStatusDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getStatusDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getStatusDetails_result& obj);
};

typedef struct _FacebookService_getStatusDetails_presult__isset {
  _FacebookService_getStatusDetails_presult__isset() : success(false) {}
  bool success :1;
} _FacebookService_getStatusDetails_presult__isset;

class FacebookService_getStatusDetails_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~FacebookService_getStatusDetails_presult() throw();
  std::string* success;

  _FacebookService_getStatusDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getStatusDetails_presult& obj);
};


class FacebookService_getCounters_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  FacebookService_getCounters_args(const FacebookService_getCounters_args&);
  FacebookService_getCounters_args& operator=(const FacebookService_getCounters_args&);
  FacebookService_getCounters_args() {
  }

  virtual ~FacebookService_getCounters_args() throw();

  bool operator == (const FacebookService_getCounters_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FacebookService_getCounters_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getCounters_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getCounters_args& obj);
};


class FacebookService_getCounters_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~FacebookService_getCounters_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getCounters_pargs& obj);
};

typedef struct _FacebookService_getCounters_result__isset {
  _FacebookService_getCounters_result__isset() : success(false) {}
  bool success :1;
} _FacebookService_getCounters_result__isset;

class FacebookService_getCounters_result {
 public:

  static const char* ascii_fingerprint; // = "8EBD4692F4235543421FE18D6A576996";
  static const uint8_t binary_fingerprint[16]; // = {0x8E,0xBD,0x46,0x92,0xF4,0x23,0x55,0x43,0x42,0x1F,0xE1,0x8D,0x6A,0x57,0x69,0x96};

  FacebookService_getCounters_result(const FacebookService_getCounters_result&);
  FacebookService_getCounters_result& operator=(const FacebookService_getCounters_result&);
  FacebookService_getCounters_result() {
  }

  virtual ~FacebookService_getCounters_result() throw();
  std::map<std::string, int64_t>  success;

  _FacebookService_getCounters_result__isset __isset;

  void __set_success(const std::map<std::string, int64_t> & val);

  bool operator == (const FacebookService_getCounters_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FacebookService_getCounters_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getCounters_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getCounters_result& obj);
};

typedef struct _FacebookService_getCounters_presult__isset {
  _FacebookService_getCounters_presult__isset() : success(false) {}
  bool success :1;
} _FacebookService_getCounters_presult__isset;

class FacebookService_getCounters_presult {
 public:

  static const char* ascii_fingerprint; // = "8EBD4692F4235543421FE18D6A576996";
  static const uint8_t binary_fingerprint[16]; // = {0x8E,0xBD,0x46,0x92,0xF4,0x23,0x55,0x43,0x42,0x1F,0xE1,0x8D,0x6A,0x57,0x69,0x96};


  virtual ~FacebookService_getCounters_presult() throw();
  std::map<std::string, int64_t> * success;

  _FacebookService_getCounters_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getCounters_presult& obj);
};

typedef struct _FacebookService_getCounter_args__isset {
  _FacebookService_getCounter_args__isset() : key(false) {}
  bool key :1;
} _FacebookService_getCounter_args__isset;

class FacebookService_getCounter_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  FacebookService_getCounter_args(const FacebookService_getCounter_args&);
  FacebookService_getCounter_args& operator=(const FacebookService_getCounter_args&);
  FacebookService_getCounter_args() : key() {
  }

  virtual ~FacebookService_getCounter_args() throw();
  std::string key;

  _FacebookService_getCounter_args__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const FacebookService_getCounter_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const FacebookService_getCounter_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getCounter_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getCounter_args& obj);
};


class FacebookService_getCounter_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~FacebookService_getCounter_pargs() throw();
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getCounter_pargs& obj);
};

typedef struct _FacebookService_getCounter_result__isset {
  _FacebookService_getCounter_result__isset() : success(false) {}
  bool success :1;
} _FacebookService_getCounter_result__isset;

class FacebookService_getCounter_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  FacebookService_getCounter_result(const FacebookService_getCounter_result&);
  FacebookService_getCounter_result& operator=(const FacebookService_getCounter_result&);
  FacebookService_getCounter_result() : success(0) {
  }

  virtual ~FacebookService_getCounter_result() throw();
  int64_t success;

  _FacebookService_getCounter_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const FacebookService_getCounter_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FacebookService_getCounter_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getCounter_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getCounter_result& obj);
};

typedef struct _FacebookService_getCounter_presult__isset {
  _FacebookService_getCounter_presult__isset() : success(false) {}
  bool success :1;
} _FacebookService_getCounter_presult__isset;

class FacebookService_getCounter_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~FacebookService_getCounter_presult() throw();
  int64_t* success;

  _FacebookService_getCounter_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getCounter_presult& obj);
};

typedef struct _FacebookService_setOption_args__isset {
  _FacebookService_setOption_args__isset() : key(false), value(false) {}
  bool key :1;
  bool value :1;
} _FacebookService_setOption_args__isset;

class FacebookService_setOption_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  FacebookService_setOption_args(const FacebookService_setOption_args&);
  FacebookService_setOption_args& operator=(const FacebookService_setOption_args&);
  FacebookService_setOption_args() : key(), value() {
  }

  virtual ~FacebookService_setOption_args() throw();
  std::string key;
  std::string value;

  _FacebookService_setOption_args__isset __isset;

  void __set_key(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const FacebookService_setOption_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const FacebookService_setOption_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_setOption_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_setOption_args& obj);
};


class FacebookService_setOption_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~FacebookService_setOption_pargs() throw();
  const std::string* key;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_setOption_pargs& obj);
};


class FacebookService_setOption_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  FacebookService_setOption_result(const FacebookService_setOption_result&);
  FacebookService_setOption_result& operator=(const FacebookService_setOption_result&);
  FacebookService_setOption_result() {
  }

  virtual ~FacebookService_setOption_result() throw();

  bool operator == (const FacebookService_setOption_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FacebookService_setOption_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_setOption_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_setOption_result& obj);
};


class FacebookService_setOption_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~FacebookService_setOption_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_setOption_presult& obj);
};

typedef struct _FacebookService_getOption_args__isset {
  _FacebookService_getOption_args__isset() : key(false) {}
  bool key :1;
} _FacebookService_getOption_args__isset;

class FacebookService_getOption_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  FacebookService_getOption_args(const FacebookService_getOption_args&);
  FacebookService_getOption_args& operator=(const FacebookService_getOption_args&);
  FacebookService_getOption_args() : key() {
  }

  virtual ~FacebookService_getOption_args() throw();
  std::string key;

  _FacebookService_getOption_args__isset __isset;

  void __set_key(const std::string& val);

  bool operator == (const FacebookService_getOption_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const FacebookService_getOption_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getOption_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getOption_args& obj);
};


class FacebookService_getOption_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~FacebookService_getOption_pargs() throw();
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getOption_pargs& obj);
};

typedef struct _FacebookService_getOption_result__isset {
  _FacebookService_getOption_result__isset() : success(false) {}
  bool success :1;
} _FacebookService_getOption_result__isset;

class FacebookService_getOption_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  FacebookService_getOption_result(const FacebookService_getOption_result&);
  FacebookService_getOption_result& operator=(const FacebookService_getOption_result&);
  FacebookService_getOption_result() : success() {
  }

  virtual ~FacebookService_getOption_result() throw();
  std::string success;

  _FacebookService_getOption_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const FacebookService_getOption_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FacebookService_getOption_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getOption_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getOption_result& obj);
};

typedef struct _FacebookService_getOption_presult__isset {
  _FacebookService_getOption_presult__isset() : success(false) {}
  bool success :1;
} _FacebookService_getOption_presult__isset;

class FacebookService_getOption_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~FacebookService_getOption_presult() throw();
  std::string* success;

  _FacebookService_getOption_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getOption_presult& obj);
};


class FacebookService_getOptions_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  FacebookService_getOptions_args(const FacebookService_getOptions_args&);
  FacebookService_getOptions_args& operator=(const FacebookService_getOptions_args&);
  FacebookService_getOptions_args() {
  }

  virtual ~FacebookService_getOptions_args() throw();

  bool operator == (const FacebookService_getOptions_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FacebookService_getOptions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getOptions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getOptions_args& obj);
};


class FacebookService_getOptions_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~FacebookService_getOptions_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getOptions_pargs& obj);
};

typedef struct _FacebookService_getOptions_result__isset {
  _FacebookService_getOptions_result__isset() : success(false) {}
  bool success :1;
} _FacebookService_getOptions_result__isset;

class FacebookService_getOptions_result {
 public:

  static const char* ascii_fingerprint; // = "7722CAB26D5D8252F8DAEA54B25BC179";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x22,0xCA,0xB2,0x6D,0x5D,0x82,0x52,0xF8,0xDA,0xEA,0x54,0xB2,0x5B,0xC1,0x79};

  FacebookService_getOptions_result(const FacebookService_getOptions_result&);
  FacebookService_getOptions_result& operator=(const FacebookService_getOptions_result&);
  FacebookService_getOptions_result() {
  }

  virtual ~FacebookService_getOptions_result() throw();
  std::map<std::string, std::string>  success;

  _FacebookService_getOptions_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val);

  bool operator == (const FacebookService_getOptions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FacebookService_getOptions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getOptions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getOptions_result& obj);
};

typedef struct _FacebookService_getOptions_presult__isset {
  _FacebookService_getOptions_presult__isset() : success(false) {}
  bool success :1;
} _FacebookService_getOptions_presult__isset;

class FacebookService_getOptions_presult {
 public:

  static const char* ascii_fingerprint; // = "7722CAB26D5D8252F8DAEA54B25BC179";
  static const uint8_t binary_fingerprint[16]; // = {0x77,0x22,0xCA,0xB2,0x6D,0x5D,0x82,0x52,0xF8,0xDA,0xEA,0x54,0xB2,0x5B,0xC1,0x79};


  virtual ~FacebookService_getOptions_presult() throw();
  std::map<std::string, std::string> * success;

  _FacebookService_getOptions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getOptions_presult& obj);
};

typedef struct _FacebookService_getCpuProfile_args__isset {
  _FacebookService_getCpuProfile_args__isset() : profileDurationInSec(false) {}
  bool profileDurationInSec :1;
} _FacebookService_getCpuProfile_args__isset;

class FacebookService_getCpuProfile_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  FacebookService_getCpuProfile_args(const FacebookService_getCpuProfile_args&);
  FacebookService_getCpuProfile_args& operator=(const FacebookService_getCpuProfile_args&);
  FacebookService_getCpuProfile_args() : profileDurationInSec(0) {
  }

  virtual ~FacebookService_getCpuProfile_args() throw();
  int32_t profileDurationInSec;

  _FacebookService_getCpuProfile_args__isset __isset;

  void __set_profileDurationInSec(const int32_t val);

  bool operator == (const FacebookService_getCpuProfile_args & rhs) const
  {
    if (!(profileDurationInSec == rhs.profileDurationInSec))
      return false;
    return true;
  }
  bool operator != (const FacebookService_getCpuProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getCpuProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getCpuProfile_args& obj);
};


class FacebookService_getCpuProfile_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~FacebookService_getCpuProfile_pargs() throw();
  const int32_t* profileDurationInSec;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getCpuProfile_pargs& obj);
};

typedef struct _FacebookService_getCpuProfile_result__isset {
  _FacebookService_getCpuProfile_result__isset() : success(false) {}
  bool success :1;
} _FacebookService_getCpuProfile_result__isset;

class FacebookService_getCpuProfile_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  FacebookService_getCpuProfile_result(const FacebookService_getCpuProfile_result&);
  FacebookService_getCpuProfile_result& operator=(const FacebookService_getCpuProfile_result&);
  FacebookService_getCpuProfile_result() : success() {
  }

  virtual ~FacebookService_getCpuProfile_result() throw();
  std::string success;

  _FacebookService_getCpuProfile_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const FacebookService_getCpuProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FacebookService_getCpuProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_getCpuProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getCpuProfile_result& obj);
};

typedef struct _FacebookService_getCpuProfile_presult__isset {
  _FacebookService_getCpuProfile_presult__isset() : success(false) {}
  bool success :1;
} _FacebookService_getCpuProfile_presult__isset;

class FacebookService_getCpuProfile_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~FacebookService_getCpuProfile_presult() throw();
  std::string* success;

  _FacebookService_getCpuProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_getCpuProfile_presult& obj);
};


class FacebookService_aliveSince_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  FacebookService_aliveSince_args(const FacebookService_aliveSince_args&);
  FacebookService_aliveSince_args& operator=(const FacebookService_aliveSince_args&);
  FacebookService_aliveSince_args() {
  }

  virtual ~FacebookService_aliveSince_args() throw();

  bool operator == (const FacebookService_aliveSince_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FacebookService_aliveSince_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_aliveSince_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_aliveSince_args& obj);
};


class FacebookService_aliveSince_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~FacebookService_aliveSince_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_aliveSince_pargs& obj);
};

typedef struct _FacebookService_aliveSince_result__isset {
  _FacebookService_aliveSince_result__isset() : success(false) {}
  bool success :1;
} _FacebookService_aliveSince_result__isset;

class FacebookService_aliveSince_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  FacebookService_aliveSince_result(const FacebookService_aliveSince_result&);
  FacebookService_aliveSince_result& operator=(const FacebookService_aliveSince_result&);
  FacebookService_aliveSince_result() : success(0) {
  }

  virtual ~FacebookService_aliveSince_result() throw();
  int64_t success;

  _FacebookService_aliveSince_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const FacebookService_aliveSince_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const FacebookService_aliveSince_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_aliveSince_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_aliveSince_result& obj);
};

typedef struct _FacebookService_aliveSince_presult__isset {
  _FacebookService_aliveSince_presult__isset() : success(false) {}
  bool success :1;
} _FacebookService_aliveSince_presult__isset;

class FacebookService_aliveSince_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~FacebookService_aliveSince_presult() throw();
  int64_t* success;

  _FacebookService_aliveSince_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_aliveSince_presult& obj);
};


class FacebookService_reinitialize_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  FacebookService_reinitialize_args(const FacebookService_reinitialize_args&);
  FacebookService_reinitialize_args& operator=(const FacebookService_reinitialize_args&);
  FacebookService_reinitialize_args() {
  }

  virtual ~FacebookService_reinitialize_args() throw();

  bool operator == (const FacebookService_reinitialize_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FacebookService_reinitialize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_reinitialize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_reinitialize_args& obj);
};


class FacebookService_reinitialize_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~FacebookService_reinitialize_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_reinitialize_pargs& obj);
};


class FacebookService_shutdown_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  FacebookService_shutdown_args(const FacebookService_shutdown_args&);
  FacebookService_shutdown_args& operator=(const FacebookService_shutdown_args&);
  FacebookService_shutdown_args() {
  }

  virtual ~FacebookService_shutdown_args() throw();

  bool operator == (const FacebookService_shutdown_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FacebookService_shutdown_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FacebookService_shutdown_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_shutdown_args& obj);
};


class FacebookService_shutdown_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~FacebookService_shutdown_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const FacebookService_shutdown_pargs& obj);
};

class FacebookServiceClient : virtual public FacebookServiceIf {
 public:
  FacebookServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FacebookServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getName(std::string& _return);
  void send_getName();
  void recv_getName(std::string& _return);
  void getVersion(std::string& _return);
  void send_getVersion();
  void recv_getVersion(std::string& _return);
  fb_status::type getStatus();
  void send_getStatus();
  fb_status::type recv_getStatus();
  void getStatusDetails(std::string& _return);
  void send_getStatusDetails();
  void recv_getStatusDetails(std::string& _return);
  void getCounters(std::map<std::string, int64_t> & _return);
  void send_getCounters();
  void recv_getCounters(std::map<std::string, int64_t> & _return);
  int64_t getCounter(const std::string& key);
  void send_getCounter(const std::string& key);
  int64_t recv_getCounter();
  void setOption(const std::string& key, const std::string& value);
  void send_setOption(const std::string& key, const std::string& value);
  void recv_setOption();
  void getOption(std::string& _return, const std::string& key);
  void send_getOption(const std::string& key);
  void recv_getOption(std::string& _return);
  void getOptions(std::map<std::string, std::string> & _return);
  void send_getOptions();
  void recv_getOptions(std::map<std::string, std::string> & _return);
  void getCpuProfile(std::string& _return, const int32_t profileDurationInSec);
  void send_getCpuProfile(const int32_t profileDurationInSec);
  void recv_getCpuProfile(std::string& _return);
  int64_t aliveSince();
  void send_aliveSince();
  int64_t recv_aliveSince();
  void reinitialize();
  void send_reinitialize();
  void shutdown();
  void send_shutdown();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class FacebookServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<FacebookServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (FacebookServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getStatusDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCounters(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCounter(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setOption(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getOption(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getOptions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCpuProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_aliveSince(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reinitialize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shutdown(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  FacebookServiceProcessor(boost::shared_ptr<FacebookServiceIf> iface) :
    iface_(iface) {
    processMap_["getName"] = &FacebookServiceProcessor::process_getName;
    processMap_["getVersion"] = &FacebookServiceProcessor::process_getVersion;
    processMap_["getStatus"] = &FacebookServiceProcessor::process_getStatus;
    processMap_["getStatusDetails"] = &FacebookServiceProcessor::process_getStatusDetails;
    processMap_["getCounters"] = &FacebookServiceProcessor::process_getCounters;
    processMap_["getCounter"] = &FacebookServiceProcessor::process_getCounter;
    processMap_["setOption"] = &FacebookServiceProcessor::process_setOption;
    processMap_["getOption"] = &FacebookServiceProcessor::process_getOption;
    processMap_["getOptions"] = &FacebookServiceProcessor::process_getOptions;
    processMap_["getCpuProfile"] = &FacebookServiceProcessor::process_getCpuProfile;
    processMap_["aliveSince"] = &FacebookServiceProcessor::process_aliveSince;
    processMap_["reinitialize"] = &FacebookServiceProcessor::process_reinitialize;
    processMap_["shutdown"] = &FacebookServiceProcessor::process_shutdown;
  }

  virtual ~FacebookServiceProcessor() {}
};

class FacebookServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  FacebookServiceProcessorFactory(const ::boost::shared_ptr< FacebookServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< FacebookServiceIfFactory > handlerFactory_;
};

class FacebookServiceMultiface : virtual public FacebookServiceIf {
 public:
  FacebookServiceMultiface(std::vector<boost::shared_ptr<FacebookServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~FacebookServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<FacebookServiceIf> > ifaces_;
  FacebookServiceMultiface() {}
  void add(boost::shared_ptr<FacebookServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getName(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getName(_return);
    }
    ifaces_[i]->getName(_return);
    return;
  }

  void getVersion(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getVersion(_return);
    }
    ifaces_[i]->getVersion(_return);
    return;
  }

  fb_status::type getStatus() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getStatus();
    }
    return ifaces_[i]->getStatus();
  }

  void getStatusDetails(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getStatusDetails(_return);
    }
    ifaces_[i]->getStatusDetails(_return);
    return;
  }

  void getCounters(std::map<std::string, int64_t> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCounters(_return);
    }
    ifaces_[i]->getCounters(_return);
    return;
  }

  int64_t getCounter(const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCounter(key);
    }
    return ifaces_[i]->getCounter(key);
  }

  void setOption(const std::string& key, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setOption(key, value);
    }
    ifaces_[i]->setOption(key, value);
  }

  void getOption(std::string& _return, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getOption(_return, key);
    }
    ifaces_[i]->getOption(_return, key);
    return;
  }

  void getOptions(std::map<std::string, std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getOptions(_return);
    }
    ifaces_[i]->getOptions(_return);
    return;
  }

  void getCpuProfile(std::string& _return, const int32_t profileDurationInSec) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCpuProfile(_return, profileDurationInSec);
    }
    ifaces_[i]->getCpuProfile(_return, profileDurationInSec);
    return;
  }

  int64_t aliveSince() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->aliveSince();
    }
    return ifaces_[i]->aliveSince();
  }

  void reinitialize() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reinitialize();
    }
    ifaces_[i]->reinitialize();
  }

  void shutdown() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->shutdown();
    }
    ifaces_[i]->shutdown();
  }

};

}} // namespace

#endif
